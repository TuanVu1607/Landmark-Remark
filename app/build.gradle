plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.com.google.dagger.hilt.android)
    alias(libs.plugins.com.google.devtools.ksp)
    alias(libs.plugins.jetbrains.kotlin.android)
    alias(libs.plugins.jetbrains.kotlin.kapt)
    alias(libs.plugins.androidx.navigation.safeargs)
    alias(libs.plugins.map.secret)
}

hilt {
    enableAggregatingTask = true
}

ext {
    def SERVER_TYPE_TEST = "test"
    def SERVER_TYPE_PRODUCT = "product"

    def taskName = project.gradle.startParameter.taskNames[0]
    if (taskName == null) taskName = ''
    def serverType = taskName === "Debug" ? SERVER_TYPE_TEST : SERVER_TYPE_PRODUCT

    DEBUG = serverType !== SERVER_TYPE_PRODUCT
}

android {
    namespace 'com.technology.landmarkremark'
    compileSdk appCompileSdkVersion

    defaultConfig {
        applicationId "com.technology.landmarkremark"
        minSdk appMinSdkVersion
        targetSdk appTargetSdkVersion
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        buildFeatures.buildConfig true
        buildConfigField('boolean', 'DEBUG', '' + DEBUG + '')
    }

    buildTypes {
        debug {
            // thêm hậu tố vào tên gói
//            applicationIdSuffix ".debug"
            // chế độ gỡ lỗi
            debuggable true
            jniDebuggable true
            // Loại bỏ các tài nguyên vô dụng
            shrinkResources false
            // xáo trộn mã
            minifyEnabled false
            // set app name
            addManifestPlaceholders(["app_name": "Landmark Remark Debug"])
        }

        release {
            // chế độ gỡ lỗi
            debuggable false
            jniDebuggable false
            // Loại bỏ các tài nguyên vô dụng
            shrinkResources true
            // xáo trộn mã
            minifyEnabled true
            // set app name
            addManifestPlaceholders(["app_name": "@string/app_name"])
            // set proguard
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        dataBinding true
        buildConfig true
    }
}

secrets {
    propertiesFileName = "secrets.properties"
    defaultPropertiesFileName = "local.defaults.properties"
    ignoreList.add("keyToIgnore") // Ignore the key "keyToIgnore"
    ignoreList.add("sdk.*")       // Ignore all keys matching the regexp "sdk.*"
}

dependencies {

    // Test
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)

    // Kotlin
    implementation(libs.kotlin.stdlib)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.appcompat)

    // Material Design
    implementation(libs.material)

    implementation libs.androidx.activity

    //Shared Preferences
    implementation(libs.preference.ktx)

    // ConstraintLayout
    implementation(libs.androidx.constraintlayout)

    // Multidex
    implementation(libs.androidx.multidex)

    // Dagger Hilt
    implementation(libs.hilt)
    ksp(libs.hilt.compiler)

    // Room
    implementation(libs.room)
    implementation(libs.room.runtime)
    ksp(libs.room.compiler)

    // Coroutines
    implementation(libs.kotlinx.coroutines.core)
    implementation(libs.kotlinx.coroutines.android)

    // Lifecycle Scopes
    implementation(libs.lifecycle)
    implementation(libs.lifecycle.runtime)
    implementation(libs.lifecycle.extensions)

    // Retrofit
    implementation(libs.retrofit)
    implementation(libs.converter.gson)
    implementation(libs.logging.interceptor)

    // Gson
    implementation(libs.gson)

    // Navigation
    implementation(libs.androidx.navigation.fragment.ktx)
    implementation(libs.androidx.navigation.ui.ktx)

    // Glide
    implementation(libs.glide)
    ksp(libs.ksp)

    // Maps SDK for Android
    implementation(libs.google.maps)
    // Google API Service
    implementation libs.google.places
    // Location Service
    implementation libs.play.services.location

    //New Splash Screen for SDK 31 and later
    implementation(libs.androidx.core.splashscreen)
}